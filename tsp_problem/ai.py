#!/usr/bin/python

# this AI class perform A star search algorithm
from node_fringe import Fringe
from node import Node

class AI:

    #node generated by A* search counter
    node_expand = 0

    def __init__(self, cities):
        self.cities = cities
        self.goal = cities[0]
        self.node_expand = 0


    def cur_out_unvisited(self, current, unvisited):
        unvisited.remove(current)
        return unvisited


    def explore_neighbors(self, current):
        explored = []
        for unvisited in current.unvisited:
            tmp_unvisited = self.cur_out_unvisited(unvisited, current.unvisited[:])
            new_node = Node(unvisited, current, tmp_unvisited, self.goal)
            new_node.g_value = new_node.g_function(current.city, unvisited, current.g_value)
            new_node.f_value = new_node.f_function(current.city, unvisited, tmp_unvisited[:], current.g_value)
            explored.append(new_node)

        return explored


    # give back the result by get the former city following the came_from, which is a node instance
    #the beginning is the A cities which came_from is None
    def showResult(self, end):
        result = [end.city]
        node = end.came_from
        while node is not None:
            result.append(node.city)
            node = node.came_from

        return reversed(result)


    def perfroming_AI(self):
        fringe = Fringe(self.cities[0])
        self.cities.remove(self.goal)

        initial_node = Node(self.goal, None, self.cities, self.goal)
        fringe.addOne(initial_node)


        while True:
            current_node = fringe.get_min_f()
            fringe.queue.remove(current_node)

            fringe_to_add = self.explore_neighbors(current_node)

            AI.node_expand += len(fringe_to_add)

            # print "nodes have expand", AI.node_expand, "&&", len(fringe_to_add)
            if AI.node_expand != 0 and len(current_node.unvisited) == 0:
                print "a star search are done"
                return self.showResult(current_node)

            fringe.addAll(fringe_to_add)















# print "mini_f :", current_node.city.name, current_node.came_from.name
            # if current_node.came_from is not None:
            #     print "mini_f :", current_node.city.name, current_node.came_from.city.name, "unvisited", len(current_node.unvisited)
            # else:
            #     print "mini_f :", current_node.city.name, "from the start node "


















